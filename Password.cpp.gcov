        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:2
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:   The function receives a string counts how many times the same character 
        -:    8:   occurs at the beginning of the string, before any other characters (or the
        -:    9:   end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:   'z' and any ASCII characters are allowed.
        -:   11:   */
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 100%
       14:   12:int Password::count_leading_characters(string phrase){
       14:   13:	int repetition = 1;
       14:   14:	int index = 0;
       28:   15:	while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 28
branch  1 taken 22 (fallthrough)
branch  2 taken 6
call    3 returned 22
call    4 returned 22
branch  5 taken 14 (fallthrough)
branch  6 taken 8
branch  7 taken 14
branch  8 taken 14 (fallthrough)
       14:   16:		repetition++;
       14:   17:		index++;
        -:   18:	}
       14:   19:	return repetition;
        -:   20:}
        -:   21:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 20 returned 100% blocks executed 100%
       20:   22:bool Password::has_mixed_case(string str) {
       20:   23:	if (isupper(str[0])) {
call    0 returned 20
branch  1 taken 4 (fallthrough)
branch  2 taken 16
       30:   24:		for (int i = 0; i < str.size(); i++) {
call    0 returned 30
branch  1 taken 28
branch  2 taken 2 (fallthrough)
       28:   25:			if (!isupper(str[i])) {
call    0 returned 28
branch  1 taken 2 (fallthrough)
branch  2 taken 26
        2:   26:				return 1;
        -:   27:			}
        -:   28:		}
        2:   29:		return 0;
        -:   30:	}
        -:   31:	else {
      288:   32:		for (int i = 0; i < str.size(); i++) {
call    0 returned 288
branch  1 taken 280
branch  2 taken 8 (fallthrough)
      280:   33:			if (isupper(str[i])) {
call    0 returned 280
branch  1 taken 8 (fallthrough)
branch  2 taken 272
        8:   34:				return 1;
        -:   35:			}
        -:   36:		}
        8:   37:		return 0;
        -:   38:	}
        -:   39:}
        -:   40:
        -:   41:
        -:   42:
        -:   43:
        -:   44:
        -:   45:
        -:   46://constructor sets the default password to "ChicoCA-95929"
function _ZN8PasswordC2Ev called 42 returned 100% blocks executed 53%
       42:   47:Password::Password() {
call    0 returned 42
       42:   48:	pass_history.push_back("ChicoCA-95929");
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 42
branch  5 taken 42 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 42
call    8 returned 42
call    9 never executed
call   10 never executed
       42:   49:}
call    0 never executed
        -:   50:
        -:   51:/*
        -:   52:   receives a password and sets the latest in pass_history to it if and only
        -:   53:   if it meets all criteria:
        -:   54:   1. The password is at least 8 letters long, but no longer than 20
        -:   55:   2. It has no more than 3 of the same leading characters
        -:   56:   3. It has mixed case (at least one upper case and at least one lower case)
        -:   57:   4. It was not a previous password in the history
        -:   58:   */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 89%
        8:   59:bool Password::set(string str) {
        8:   60:	if (str.size() >= 8 && str.size() <= 20) {
call    0 returned 8
branch  1 taken 6 (fallthrough)
branch  2 taken 2
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0
branch  6 taken 6 (fallthrough)
branch  7 taken 2
        6:   61:		if (!(str[0] == str[1] && str[1] == str[2]) && has_mixed_case(str)) {
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 2 (fallthrough)
branch  7 taken 4
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
call   11 returned 2
branch 12 taken 2 (fallthrough)
branch 13 taken 0 (throw)
branch 14 taken 0 (fallthrough)
branch 15 taken 2
call   16 returned 4
branch 17 taken 4 (fallthrough)
branch 18 taken 0 (throw)
call   19 returned 4
branch 20 taken 4 (fallthrough)
branch 21 taken 0 (throw)
branch 22 taken 2 (fallthrough)
branch 23 taken 2
branch 24 taken 4 (fallthrough)
branch 25 taken 2
call   26 returned 4
branch 27 taken 2 (fallthrough)
branch 28 taken 4
branch 29 never executed
branch 30 never executed
call   31 never executed
        4:   62:				for (int i = 0; i < pass_history.size(); i++) {
call    0 returned 4
branch  1 taken 2
branch  2 taken 2 (fallthrough)
        2:   63:					if (str == pass_history[i]) {
call    0 returned 2
call    1 returned 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:   64:						return 0;
        -:   65:					}
        -:   66:					//pass_history.push_back(str);
        -:   67:				}
        2:   68:				pass_history.push_back(str);
call    0 returned 2
        2:   69:				return 1;
        -:   70:		}
        -:   71:	}
        6:   72:	return 0;
        -:   73:}
        -:   74:
        -:   75:/*
        -:   76:   receives a string and authenticates it against the latest password in the
        -:   77:   pass_history, returning true for an exact match or false when it does not match
        -:   78:   or if a password has not been set.
        -:   79:   */
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 100%
        4:   80:bool Password::authenticate(string str) {
        4:   81:	if (str == pass_history[pass_history.size()-1]) {
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        2:   82:		return 1;
        -:   83:	}
        2:   84:	return 0;
        -:   85:}
        -:   86:
        -:   87:
        -:   88:
        -:   89:
        -:   90:
        -:   91:
        -:   92:
        -:   93:
        -:   94:
        -:   95:
        -:   96:
        -:   97:/*
        -:   98:// Implementation A
        -:   99:#include <cctype>
        -:  100:bool Password::has_mixed_case(string str)
        -:  101:{
        -:  102:bool has_lower = false;
        -:  103:bool has_upper = false;
        -:  104:for (char ch : str)
        -:  105:{
        -:  106:if (std::islower(ch))
        -:  107:{
        -:  108:has_lower = true;
        -:  109:}
        -:  110:else if (std::isupper(ch))
        -:  111:{
        -:  112:has_upper = true;
        -:  113:}
        -:  114:}
        -:  115:return has_lower && has_upper;
        -:  116:}
        -:  117:
        -:  118:// Implementation B
        -:  119:bool Password::has_mixed_case(string str)
        -:  120:{
        -:  121:int count_lower = 0;
        -:  122:for (int i = 0; i < str.length(); i++)
        -:  123:{
        -:  124:if (str[i] >= 'a' && str[i] <= 'z')
        -:  125:{
        -:  126:count_lower++;
        -:  127:}
        -:  128:}
        -:  129:return count_lower > 0 && count_lower < str.length();
        -:  130:}
        -:  131:
        -:  132:
        -:  133:// Implementation C
        -:  134:bool Password::has_mixed_case(string str)
        -:  135:{
        -:  136:bool lower = false;
        -:  137:bool upper = false;
        -:  138:for (int i = 0; i < str.length(); i++)
        -:  139:{
        -:  140:if (str[i] >= 'a' && str[i] <= 'z')
        -:  141:{
        -:  142:lower = true;
        -:  143:}
        -:  144:else if (str[i] >= 'A' && str[i] <= 'Z')
        -:  145:{
        -:  146:upper = true;
        -:  147:}
        -:  148:}
        -:  149:return upper && lower;
        -:  150:} 
        -:  151:// Implementation D
        -:  152:#include <cctype>
        -:  153:bool Password::has_mixed_case(string str)
        -:  154:{
        -:  155:bool is_lower = false;
        -:  156:bool is_upper = false;
        -:  157:for (char c : str)
        -:  158:{
        -:  159:if (std::islower(c))
        -:  160:{
        -:  161:is_lower = true;
        -:  162:}
        -:  163:else
        -:  164:{
        -:  165:is_upper = true;
        -:  166:}
        -:  167:}
        -:  168:return is_lower && is_upper;
        -:  169:}
        -:  170:// Implementation E
        -:  171:bool Password::has_mixed_case(string str)
        -:  172:{
        -:  173:	bool found = false;
        -:  174:	for(char c : str){
        -:  175:		if( !found && c >= 'A' && c <= 'Z' ){
        -:  176:			found = true;
        -:  177:		}
        -:  178:		else if( found && c >= 'a' && c <= 'z'){
        -:  179:			return true;
        -:  180:		}
        -:  181:	}
        -:  182:	return false;
        -:  183:}
        -:  184:*/
